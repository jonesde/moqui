<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-1.5.xsd"
        require-authentication="false" track-artifact-hit="false" default-menu-include="false">
    <!-- NOTE: require-authentication=false is required to allow transitions to decide. -->

    <!--
    EXAMPLES

    Verbs: GET=find, POST=create, PUT=store (create or update), PATCH=update, DELETE=delete

    By short-alias:
    NOTE: "am9obi5kb2U6bW9xdWk=" is the Base64 encoded String "john.doe:moqui"

    curl -X GET -H "Authorization: Basic am9obi5kb2U6bW9xdWk=" http://localhost:8080/rest/v1/examples/TEST2
    curl -X GET -u john.doe:moqui http://localhost:8080/rest/v1/examples/TEST2

    By entity name:

    curl -X GET -H "Authorization: Basic am9obi5kb2U6bW9xdWk=" http://localhost:8080/rest/v1/Example/TEST2

    Detail/child records can be retrieved in various ways, in the first "items" is a short-alias on the relationship:

    curl -X GET -u john.doe:moqui http://localhost:8080/rest/v1/examples/TEST2/items/01
    curl -X GET -u john.doe:moqui http://localhost:8080/rest/v1/exampleItems/TEST2/01

    To get a record plus all dependents in the JSON document use dependents=true:

    curl -X GET -u john.doe:moqui -i http://localhost:8080/rest/v1/examples/TEST2?dependents=true

    To get a record plus all dependent/related records for a master definition in the JSON document use master=${masterName}:

    curl -X GET -u john.doe:moqui -i http://localhost:8080/rest/v1/examples/TEST2?master=default

    Parameters can also be used for searching, which supports the per-field extensions (_op, _ic, etc) of
    EntityFind.searchFormInputs(), the orderByField parameter for comma-separated fields to sort the results by,
    and pageIndex, pageSize for pagination; parameters can be in the URL (preferred) or in request body as JSON.

    The number of records will be limited to 100 unless a different pageSize is specified. The total count of records
    is returned in the X-Total-Count HTTP response header. To facilitate pagination also calculates and adds headers
    for the same fields Moqui uses for pagination: X-Page-Index, X-Page-Size, X-Page-Max-Index, X-Page-Range-Low,
    and X-Page-Range-High.

    curl -X GET -u john.doe:moqui -i http://localhost:8080/rest/v1/examples
    curl -X GET -u john.doe:moqui -i 'http://localhost:8080/rest/v1/examples?exampleName=test&exampleName_op=contains&exampleName_ic=Y&orderByField=exampleName&pageIndex=0'

    Create looks like (note the two approaches for authc):

    curl -X POST -H "Content-Type: application/json" -u john.doe:moqui \
         -d '{ "exampleName":"REST Test 1", "exampleTypeEnumId":"EXT_MADE_UP", "statusId":"EXST_IN_DESIGN" }' \
            http://localhost:8080/rest/v1/examples
    curl -X POST -H "Content-Type: application/json" \
         -d '{ "exampleName":"REST Test 1", "exampleTypeEnumId":"EXT_MADE_UP", "statusId":"EXST_IN_DESIGN", \
             "authUsername":"john.doe", "authPassword":"moqui" }' http://localhost:8080/rest/v1/examples

    Store looks like (PATCH is similar):

    curl -X PUT -H "Content-Type: application/json" -u john.doe:moqui \
         -d '{ "exampleName":"REST Test - Rev 2" }' http://localhost:8080/rest/v1/examples/TEST2

    Delete looks like:

    curl -X DELETE -H "Content-Type: application/json" -u john.doe:moqui \
         http://localhost:8080/rest/v1/examples/100010

    This can also be used for bulk operations by passing a JSON document that is a list/array of map/object instead of a
    single map/object. The operation will be done for each entry in the list/array and the result will be a JSON
    document with a list/array with the result for each of the passed entries (generally a map/object, may be empty).

    For example, to create multiple items (ExampleItem) for an Example, with an auto-generated secondary sequence ID
    (exampleItemSeqId) use something like:

    curl -X POST -H "Content-Type: application/json" -u john.doe:moqui \
         -d '[{ "description":"New REST Item 1", "amount":100 }, { "description":"New REST Item 2", "amount":200 }]' \
            http://localhost:8080/rest/v1/examples/TEST2/items

    There is a similar concept to dependent records when creating a new record, related records can be included in the
    document by their relationship name or short-alias, for example:

    curl -X POST -H "Content-Type: application/json" -u john.doe:moqui \
         -d '{ "exampleName":"REST Test With Items", "exampleTypeEnumId":"EXT_MADE_UP", "statusId":"EXST_IN_DESIGN",
                "items": [
                    { "amount": 100.0, "description": "Test With Items Item 1" },
                    { "amount": 200.0, "description": "Test With Items Item 2" }
                ]
             }' \
            http://localhost:8080/rest/v1/examples

    For PUT/store or PATCH/update related records included in the document are stored (created or updated).

    This example has 3 items: one that will exist and be updated (01), one that has no PK value so will always be created,
    and one that has a specified PK value that won't exist the first time it is run resulting in a create but will exist
    after that resulting in an update. The second curl command can be used to see the results after each run.

    curl -X PUT -H "Content-Type: application/json" -u john.doe:moqui \
         -d '{ "exampleId":"TEST2", "exampleName":"Name updated through store with related",
                "items": [
                    { "exampleItemSeqId":"01", "description": "Updated related item 01" },
                    { "description": "Created new related item with generated ID" },
                    { "exampleItemSeqId":"FOO", "description": "Stored new or existing related item with specified ID" }
                ]
             }' \
            http://localhost:8080/rest/v1/examples
    curl -X GET -u john.doe:moqui -i http://localhost:8080/rest/v1/examples/TEST2?dependentLevels=1

    To authenticate in and access a specific tenant just pass in the tenantId, like (before running these make sure
    Example data is loaded in the EXAMPLE1 tenant database using something like "gradle load -PtenantId=EXAMPLE1"):

    curl -X GET -u john.doe:moqui http://localhost:8080/rest/v1/examples/TEST2?authTenantId=EXAMPLE1

    curl -X POST -H "Content-Type: application/json" \
         -d '{ "exampleName":"REST Test 1", "exampleTypeEnumId":"EXT_MADE_UP", "statusId":"EXST_IN_DESIGN", \
             "authUsername":"john.doe", "authPassword":"moqui", "authTenantId":"EXAMPLE1" }' http://localhost:8080/rest/v1/examples

    -->
    <!-- NOTE: read-only=true to disable check for URL parameters for transitions with actions -->
    <transition name="v1" read-only="true">
        <actions><script>ec.web.handleEntityRestCall(sri.screenUrlInfo.extraPathNameList)</script></actions>
        <default-response type="none"/>
    </transition>

    <!--
    To get the json-schema (see http://json-schema.org) for an entity use a request like:

    curl -X GET -u john.doe:moqui http://localhost:8080/rest/schema/examples
    curl -X GET -u john.doe:moqui http://localhost:8080/rest/schema/examples.json
    curl -X GET -u john.doe:moqui http://localhost:8080/rest/schema/example.Example

    To get the json-schema (see http://json-schema.org) for ALL entities use a request like:

    curl -X GET -u john.doe:moqui http://localhost:8080/rest/schema
    curl -X GET -u john.doe:moqui http://localhost:8080/rest/schema.json

    -->
    <transition name="schema" read-only="true" method="get">
        <actions><script>ec.web.handleEntityRestSchema(sri.screenUrlInfo.extraPathNameList, sri.buildUrl("schema").getUrl(),
                sri.buildUrl("v1").getUrl(), sri.buildUrl("schema").getUrl())</script></actions>
        <default-response type="none"/>
    </transition>
    <transition name="schema.json" read-only="true" method="get">
        <actions><script>ec.web.handleEntityRestSchema(sri.screenUrlInfo.extraPathNameList, sri.buildUrl("schema").getUrl(),
                sri.buildUrl("v1").getUrl(), sri.buildUrl("schema").getUrl())</script></actions>
        <default-response type="none"/>
    </transition>

    <transition name="schema.raml" read-only="true" method="get">
        <actions><script>ec.web.handleEntityRestRaml(sri.screenUrlInfo.extraPathNameList,
                sri.buildUrl("v1").getUrl(), sri.buildUrl("schema").getUrl())</script></actions>
        <default-response type="none"/>
    </transition>

    <widgets><!-- this should never be viewed... --></widgets>
</screen>
