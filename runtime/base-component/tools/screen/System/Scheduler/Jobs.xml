<?xml version="1.0" encoding="UTF-8"?>
<!--
This software is in the public domain under CC0 1.0 Universal plus a Grant of Patent License.

To the extent possible under law, the author(s) have dedicated all
copyright and related and neighboring rights to this software to the
public domain worldwide. This software is distributed without any
warranty.

You should have received a copy of the CC0 Public Domain Dedication
along with this software (see the LICENSE.md file). If not, see
<http://creativecommons.org/publicdomain/zero/1.0/>.
-->
<screen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:noNamespaceSchemaLocation="http://moqui.org/xsd/xml-screen-1.5.xsd"
        default-menu-index="2">

    <transition name="pauseTrigger">
        <parameter name="triggerName"/><parameter name="triggerGroup"/>
        <actions><script>ec.service.scheduler.pauseTrigger(org.quartz.TriggerKey.triggerKey(triggerName, triggerGroup))</script></actions>
        <default-response url="."/>
    </transition>
    <transition name="resumeTrigger">
        <parameter name="triggerName"/><parameter name="triggerGroup"/>
        <actions><script>ec.service.scheduler.resumeTrigger(org.quartz.TriggerKey.triggerKey(triggerName, triggerGroup))</script></actions>
        <default-response url="."/>
    </transition>
    <transition name="deleteJob">
        <parameter name="jobName"/><parameter name="jobGroup"/>
        <actions><script>ec.service.scheduler.deleteJob(org.quartz.JobKey.jobKey(jobName, jobGroup))</script></actions>
        <default-response url="."/>
    </transition>

    <actions>
        <set field="jobGroupList" from="ec.service.scheduler.getJobGroupNames()"/>
    </actions>
    <widgets>
        <section-iterate name="TriggerGroupsSection" list="jobGroupList" entry="jobGroup">
            <actions>
                <script>
                    import groovy.json.JsonBuilder
                    import org.quartz.JobDetail
                    import org.quartz.JobKey
                    import org.quartz.impl.matchers.GroupMatcher
                    import org.quartz.Scheduler
                    import org.quartz.Trigger
                    import org.quartz.TriggerKey

                    Scheduler scheduler = ec.service.scheduler
                    jobInfoList = []
                    Set jobKeys = scheduler.getJobKeys(GroupMatcher.jobGroupEquals((String) jobGroup))
                    for (JobKey jobKey in jobKeys) {
                        JobDetail job = scheduler.getJobDetail(jobKey)
                        if (job == null) continue
                        // skip jobs with triggers? if (scheduler.getTriggersOfJob(job.getKey()).size() > 0) continue
                        List triggers = scheduler.getTriggersOfJob(job.getKey())
                        if (triggers) {
                            for (Trigger trigger in triggers) {
                                JsonBuilder psJb = new JsonBuilder()
                                psJb.call([job.getJobDataMap(),trigger.getJobDataMap()])
                                jobInfoList.add([triggerGroup:trigger.getKey().getGroup(), triggerName:trigger.getKey().getName(),
                                        jobGroup:job.getKey().getGroup(), jobName:job.getKey().getName(),
                                        nextFireTime:(trigger.getNextFireTime() ? new Timestamp(trigger.getNextFireTime().getTime()) : null),
                                        previousFireTime:(trigger.getPreviousFireTime() ? new Timestamp(trigger.getPreviousFireTime().getTime()) : null),
                                        triggerState:scheduler.getTriggerState(trigger.getKey()).toString(), paramString:psJb.toString()])
                            }
                        } else {
                            JsonBuilder psJb = new JsonBuilder()
                            psJb.call(job.getJobDataMap())
                            jobInfoList.add([jobGroup: job.getKey().getGroup(), jobName: job.getKey().getName(),
                                    paramString:psJb.toString()])
                        }
                    }
                </script>
            </actions>
            <widgets>
                <label type="h3" text="Job Group ${jobGroup}"/>
                <form-list name="JobDetailList_${jobGroup_index}" list="jobInfoList" skip-form="true">
                    <field name="triggerGroup"><default-field><display/></default-field></field>
                    <field name="triggerName"><default-field><display/></default-field></field>
                    <field name="jobGroup"><default-field><display/></default-field></field>
                    <field name="jobName"><default-field><display/></default-field></field>
                    <field name="nextFireTime"><default-field><display/></default-field></field>
                    <field name="previousFireTime"><default-field><display/></default-field></field>
                    <field name="triggerState"><default-field><display/></default-field></field>
                    <field name="paramString"><default-field><display/></default-field></field>
                    <field name="pauseResume">
                        <conditional-field condition="triggerState == 'PAUSED'"><link url="resumeTrigger" text="Resume"/></conditional-field>
                        <conditional-field condition="triggerState"><link url="pauseTrigger" text="Pause"/></conditional-field>
                        <default-field><display text=""/></default-field>
                    </field>
                    <field name="deleteJob"><default-field><link url="deleteJob" text="Delete"/></default-field></field>
                </form-list>
            </widgets>
        </section-iterate>
    </widgets>
</screen>
